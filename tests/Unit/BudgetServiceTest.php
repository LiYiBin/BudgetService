<?php

namespace Tests\Unit;

use App\BudgetService;
use App\Budget;
use App\IBudgetRepo;
use PHPUnit\Framework\TestCase;
use \Mockery;

class BudgetServiceTest extends TestCase
{
    private BudgetService $budgetService;
    private IBudgetRepo $budgetRepo;

    public function tearDown(): void
    {
        Mockery::close();
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->budgetRepo = Mockery::mock('App\BudgetRepo');

        $this->budgetService = new BudgetService($this->budgetRepo);
    }

    private function givenBudget($budget) {
        $this->budgetRepo->shouldReceive('getAll')
            ->andReturn($budget);
    }

    private function amountShouldBe($expected, $start, $end) {
        $actual = $this->budgetService->query($start, $end);

        $this->assertSame($expected, $actual);
    }

    public function test_date_illegal() {
        $this->amountShouldBe(0, new \DateTimeImmutable('2010-05-01'), new \DateTimeImmutable('2010-04-01'));
    }

    public function test_no_budget() {
        $this->givenBudget([]);

        $this->amountShouldBe(0.00, new \DateTimeImmutable('2010-04-01'), new \DateTimeImmutable('2010-05-01'));
    }

    public function test_one_month() {
        $this->givenBudget([new Budget('202009', 1000)]);

        $this->amountShouldBe(1000.00, new \DateTimeImmutable('2020-09-01'), new \DateTimeImmutable('2020-09-30'));
    }

    public function test_two_months() {
        $this->givenBudget([
            new Budget('202009', 1000),
            new Budget('202010', 1500)
        ]);

        $this->amountShouldBe(2500.00, new \DateTimeImmutable('2020-09-01'), new \DateTimeImmutable('2020-10-31'));
    }

    public function test_three_months() {
        $this->givenBudget([
            new Budget('202009', 1000),
            new Budget('202010', 1500),
            new Budget('202011', 1200),
        ]);

        $this->amountShouldBe(3700.00, new \DateTimeImmutable('2020-09-01'), new \DateTimeImmutable('2020-11-30'));
    }

    public function test_one_day() {
        $this->givenBudget([
            new Budget('202009', 300),
        ]);
        $this->amountShouldBe(10.00, new \DateTimeImmutable('2020-09-01'), new \DateTimeImmutable('2020-09-01'));
    }

    public function test_multi_days() {
        $this->givenBudget([
            new Budget('202009', 300),
        ]);

        $this->amountShouldBe(130.00, new \DateTimeImmutable('2020-09-01'), new \DateTimeImmutable('2020-09-13'));
    }

    public function test_multi_days_for_cross_months() {
        $this->givenBudget([
            new Budget('202009', 300),
            new Budget('202010', 31),
            new Budget('202011', 3000),
        ]);

        $this->amountShouldBe(341.00, new \DateTimeImmutable('2020-09-30'), new \DateTimeImmutable('2020-11-03'));
    }
}
